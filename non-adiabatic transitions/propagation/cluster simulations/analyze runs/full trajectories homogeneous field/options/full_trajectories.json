{
  "H_fname"       : "/home/demille/jog9/project/State-evolution/matrices/H6.npy",
  "field_str": [
     "A*(potential_plate_z.derivative()(trajectories[int(idx)][2](t))*np.polynomial.polynomial.polyval2d(trajectories[int(idx)][0](t),trajectories[int(idx)][1](t),potential_plate_xy[0]))/100 + potential_quadrupole_z.derivative()(trajectories[int(idx)][2](t))*np.polynomial.polynomial.polyval2d(trajectories[int(idx)][0](t),trajectories[int(idx)][1](t),potential_quadrupole_xy[0])/100",
     "A*(potential_plate_z(trajectories[int(idx)][2](t))*np.polynomial.polynomial.polyval2d(trajectories[int(idx)][0](t),trajectories[int(idx)][1](t),potential_plate_xy[1]))/100 + potential_quadrupole_z(trajectories[int(idx)][2](t))*np.polynomial.polynomial.polyval2d(trajectories[int(idx)][0](t),trajectories[int(idx)][1](t),potential_quadrupole_xy[1])/100",
     "A*(potential_plate_z(trajectories[int(idx)][2](t))*np.polynomial.polynomial.polyval2d(trajectories[int(idx)][0](t),trajectories[int(idx)][1](t),potential_plate_xy[2]))/100 + potential_quadrupole_z(trajectories[int(idx)][2](t))*np.polynomial.polynomial.polyval2d(trajectories[int(idx)][0](t),trajectories[int(idx)][1](t),potential_quadrupole_xy[2])/100",
     "0*t",
     "0*t",
     "0*t + 0.5"
  ],
  "scan_param"    : "idx",
  "scan_range": {
    "start"       : 0,
    "stop"        : 544,
    "num"         : 545
  },
  "scan_param2"    : "A",
    "scan_range2": {
      "start"       : 1,
      "stop"        : 10,
      "num"         : 10
    },
  "fixed_params": {
  },
  "pickle_fnames": {
     "potential_plate_xy"       : "/home/demille/jog9/project/runs/options/potential_plate_xy_run1.pkl",
     "potential_plate_z"        : "/home/demille/jog9/project/runs/options/potential_plate_z_run1.pkl",
     "potential_quadrupole_xy"  : "/home/demille/jog9/project/runs/options/potential_quadrupole_xy_run1.pkl",
     "potential_quadrupole_z"   : "/home/demille/jog9/project/runs/options/potential_quadrupole_z_run1.pkl",
     "trajectories"             : "/home/demille/jog9/project/runs/options/trajectories_run1.pkl"
  },
  "units": {
    "A"           : "V/cm",
    "idx"         : ""
  },
  "time_params": {
    "num_segm"    : "100",
    "t_final"     : "trajectories[int(idx)][-1]",
    "segm_pts"    : "100 if ((-0.36 < trajectories[int(idx)][2](T0) < -0.25) or (0.25 < trajectories[int(idx)][2](T0) < 0.36)) else 50",
    "batch_size"  : 1
  },
  "state_idx"     : 35,
  "chunk_size"    : 1	
}
